language: java
os: linux

sudo: required

# specify to use docker
services:
  - docker

# specify the jdk to use
jdk:
 - openjdk17

env:
  global:
    - IMAGE_NAME=maskerwebservices
    - IMAGE_TAG=1.1.4
    # Following values set in Travis-ci setting so can eaily be changed.
    # IBM_CLOUD_REGION
    # REGISTRY_REGION
    # REGISTRY_NAMESPACE

# safelist - only work with these github branches
# will not take an env value for branch only string. 
branches:
   only:
   - travis-ci

# Need to determine if build image command within commit message, if is then 
# connect to ibmcloud repo
#before_script:
#   - build_scripts/ibm_cloud_repo.sh

# Build scripts
script:
  # Build code in Masker directory
  - echo $HOME
  - echo $(pwd)
  - cd Masker
  - mvn clean install -Dgpg.skip -q
  - ls target/*.jar
  # Build code in MaskWebServices directory
  - cd ../MaskWebServices
  - mvn clean install -Dgpg.skip
  - ls target/*.jar
  - ls target/*.war
  # Build Docker image from DOckerfile
  #- if [[ -f Masker/target/Masker-1.1.4-jar-with-dependencies.jar ]] && [[ -f MaskWebServices/target/MaskWebServices-1.1.4.war ]]; then build_scripts/build_docker_images.sh ; fi
  - build_scripts/build_docker_images.sh
  - docker images

#jobs:
#  include:
#    - stage: build_Masker
#      name: "build_Masker"
#      on:
#        branch: travis-ci
#      script:
#        - cd Masker
#        - mvn clean install -Dgpg.skip
#        - ls target/*.jar
#    - stage: build_MaskWebService
#      name: "build_MaskWebService"
#      on:
#        branch: travis-ci
#      script:
#        - cd MaskWebServices
#        - mvn clean install -Dgpg.skip
#        - ls target/*.jar
#        - ls target/*.war
#        - cd ..
#        - ls Masker/
#        - ls Masker/target/*.tar
    
#    - stage: build_docker_images
#      name: "Build Docker Images"
#      on:
#        branch: travis-ci
#      script:
#        - pwd
#        - ls ./Masker/target/*.tar
#        - ls ./MaskWebServices/target/*.tar
#        - ls ./MaskWebServices/target/*.war
#        - build_scripts/build_docker_images.sh
#        - docker images

# unit test built image
#after_success:
#  - build_scripts/unit_test_image.sh
#  - unit_test_result=$(cat unit_test_results) ; echo $unit_test_result
#  - if [[ -f unit_test_results ]] && [[ $unit_test_result != "Passed" ]]; then echo "Here" ; fi

#deploy:
#  provider: script
#  skip_cleanup: true
#  script: build_scripts/deploy_image_to_ibm_repo.sh
#  on:
#    branch: travis-ci

#after_script:
#  - docker images
#  - ibmcloud cr image-list
